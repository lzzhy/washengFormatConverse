name: CD

on:
  push:
    branches:
      - main #当main分支推送的时候,我们部署到生产服务器
      - dev* #当test分支推送的时候,我们部署到测试服务器
jobs:
  build:
    # if: github.ref == 'refs/heads/test' || github.event.pull_request.merged == true
    # runs-on 指定job任务运行所需要的虚拟机环境(必填字段)
    runs-on: ubuntu-latest
    steps:
      # 获取源码
      - name: Checkout repository
        # 使用action库  actions/checkout获取源码
        uses: actions/checkout@v2

      # 安装Node10
      - name: Use Node.js
        # 使用action库  actions/setup-node安装node
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'
      # 检查缓存
      # 如果key命中缓存则直接将缓存的文件还原到 path 目录，从而减少流水线运行时间
      # 若 key 没命中缓存时，在当前Job成功完成时将自动创建一个新缓存
      - name: Cache
        # 缓存命中结果会存储在steps.[id].outputs.cache-hit里，该变量在继后的step中可读
        id: cache-dependencies
        uses: actions/cache@v3
        with:
          # 缓存文件目录的路径
          path: |
            **/node_modules
          # key中定义缓存标志位的生成方式。runner.OS指当前环境的系统。外加对yarn.lock内容生成哈希码作为key值，如果yarn.lock改变则代表依赖有变化。
          # 这里用yarn.lock而不是package.json是因为package.json中还有version和description之类的描述项目但和依赖无关的属性
          key: ${{runner.OS}}-${{hashFiles('**/pnpm-lock.yaml')}}

      # 安装依赖
      - name: Installing Dependencies
        # 如果缓存标志位没命中，则执行该step。否则就跳过该step
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: npm install pnpm -g && pnpm install

      # 打包生成制品，且把制品压缩到assets.zip压缩包里
      - name: Building
        run: |
          npm run build 
          zip -r assets ./dist/**

      # 把制品上传到测试服务器
      - name: Upload to Deploy Server
        # if: github.ref == 'refs/heads/dev' #对分支进行检测
        uses: easingthemes/ssh-deploy@v2.1.1
        env:
          # 私钥
          SSH_PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          # scp参数
          ARGS: '-avzr --delete'
          # 源目录
          SOURCE: 'dist/'
          # 服务器ip：换成你的服务器IP
          REMOTE_HOST: ${{ secrets.TEST_REMOTE_HOST }}
          # 用户
          REMOTE_USER: 'root'
          # 目标地址
          TARGET: '/root/soft/nearhub-app/data'
